buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'de.undercouch:gradle-download-task:3.1.2'
    }
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: "de.undercouch.download"
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'core-database'
    version = '0.0.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
def checkstyleFilePath = "${project.projectDir}/checkstyle.xml"

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven {
        credentials {
            username System.getenv('MYGET_USER_NAME')
            password System.getenv('MYGET_ACCESS_TOKEN')
        }
        url 'https://www.myget.org/F/healthcare/maven/'
    }
}

/*
 * Custom tasks definition
 */

task checkCheckstyleExists {
    doLast {
        def file = new File("$checkstyleFilePath")
        if (!file.exists()) {
            download {
                src 'https://s3.amazonaws.com/hc-devops/utils/checkstyle/java/checkstyle.xml'
                dest "$checkstyleFilePath"
            }
        }
    }
}

/*
 * End Custom tasks definition
 */

dependencies {
    // Cache
    compile("org.springframework.boot:spring-boot-starter-cache")
    //compile('org.springframework.boot:spring-boot-starter-data-redis')
    // end Cache
    // Config
    compile("org.springframework.cloud:spring-cloud-starter-config")
    // end Config
    // JPA
    //compile('org.springframework.boot:spring-boot-starter-data-jpa')
    //runtime('mysql:mysql-connector-java')
    // end JPA
    // Web
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    // end Web
    // Test
    testCompile("org.springframework.boot:spring-boot-starter-test")
    // end Test
    // Healthcare-Libs
    compile("com.healthcare.lib:spring-microservice-starter:1.0.1")
    //compile("com.healthcare.lib:tracking-starter:1.0.0")
    // End Healthcare-Libs
    // Lombok
    compileOnly("org.projectlombok:lombok:1.16.14")
    // End Lombok
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.BUILD-SNAPSHOT"
    }
}

checkstyle {
    configFile = new File("$checkstyleFilePath")
    toolVersion = '7.5'
    ignoreFailures = false
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

check.dependsOn(checkCheckstyleExists)
